{"remainingRequest":"/Users/zhuwenyan/study/editor/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/zhuwenyan/study/editor/src/components/TextEditor.vue?vue&type=style&index=0&id=54500a2a&scoped=true&lang=scss&","dependencies":[{"path":"/Users/zhuwenyan/study/editor/src/components/TextEditor.vue","mtime":1618663197681},{"path":"/Users/zhuwenyan/study/editor/node_modules/css-loader/dist/cjs.js","mtime":1608104026497},{"path":"/Users/zhuwenyan/study/editor/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1616407163826},{"path":"/Users/zhuwenyan/study/editor/node_modules/postcss-loader/src/index.js","mtime":1608104026779},{"path":"/Users/zhuwenyan/study/editor/node_modules/sass-loader/dist/cjs.js","mtime":1616307389704},{"path":"/Users/zhuwenyan/study/editor/node_modules/cache-loader/dist/cjs.js","mtime":1608104016032},{"path":"/Users/zhuwenyan/study/editor/node_modules/vue-loader/lib/index.js","mtime":1616407163826}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCi8vIOe8lui+keWZqAojdGV4dC1jb250YWluZXIgewogIHRleHQtYWxpZ246IGxlZnQ7CiAgI2NvbnRyb2wtYXJlYSB7CiAgICB3aWR0aDogOTAlOwogICAgbWFyZ2luLWJvdHRvbTogMTBweDsKICAgIC5saW5rIHsKICAgICAgaGVpZ2h0OiAzMHB4OwogICAgICBsaW5lLWhlaWdodDogMzBweDsKICAgICAgZGlzcGxheTogaW5saW5lLWJsb2NrOwogICAgICAmOmZpcnN0LWNoaWxkIHsKICAgICAgICBtYXJnaW4tcmlnaHQ6IDIwcHg7CiAgICAgIH0KICAgICAgJjpob3ZlciB7CiAgICAgICAgY29sb3I6ICM0MDllZmY7CiAgICAgIH0KICAgIH0KICB9CiAgI3RleHQtYXJlYXsKICAgIHdpZHRoOiA5MCU7CiAgICBoZWlnaHQ6IDMwMHB4OwogICAgbGluZS1oZWlnaHQ6IDEuNTsKICAgIGJvcmRlcjogMXB4IHNvbGlkICNEQ0RGRTY7CiAgICBwYWRkaW5nOiA1cHggMTVweDsKICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7CiAgICBjb2xvcjogIzYwNjI2NjsKICAgIGZvbnQtc2l6ZTogMTRweDsKICAgIGJvcmRlci1yYWRpdXM6IDRweDsKICB9Cn0K"},{"version":3,"sources":["TextEditor.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"TextEditor.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div id=\"text-container\">\n    <p>自定义富文本编辑器</p>\n    <!-- 工具栏 -->\n    <div id=\"control-area\">\n      <el-button @click=\"addLink\" size=\"mini\">插入链接</el-button>\n      <el-button @click=\"handleCommand('copy')\" size=\"mini\">复制</el-button>\n      <el-button @click=\"handleCommand('cut')\" size=\"mini\">剪切</el-button>\n      <el-button @click=\"handleCommand('selectAll')\" size=\"mini\">全选</el-button>\n      <el-button @click=\"handleCommand('strikeThrough')\" size=\"mini\">删除线</el-button>\n      <el-button @click=\"handleCommand('justifyLeft')\" size=\"mini\">左</el-button>\n      <el-button @click=\"handleCommand('justifyCenter')\" size=\"mini\">居中</el-button>\n      <el-button @click=\"handleCommand('justifyRight')\" size=\"mini\">右</el-button>\n      <el-button @click=\"handleCommand('italic')\" size=\"mini\">斜体</el-button>\n      <el-button @click=\"handleCommand('underline')\" size=\"mini\">下划线</el-button>\n      <el-button @click=\"handleCommand('undo')\" size=\"mini\">撤销</el-button>\n      <el-button @click=\"handleCommand('redo')\" size=\"mini\">重做</el-button>\n    </div>\n    <!-- 文本编辑器 -->\n    <div id=\"text-area\" contenteditable></div>\n    <br />\n    <!-- 插入链接 -->\n    <el-dialog\n      width=\"30%\"\n      title=\"插入链接\"\n      :visible.sync=\"visible\"\n      append-to-body>\n      <el-form class=\"text-form\" ref=\"formDef\" :model=\"formData\">\n        <el-form-item label=\"链接\" prop=\"url\" required>\n          <el-input placeholder=\"请输入链接\" v-model=\"formData.url\"></el-input>\n        </el-form-item>\n      </el-form>\n      <span slot=\"footer\" class=\"dialog-footer\">\n        <el-button @click=\"visible = false\">取 消</el-button>\n\n        <el-button type=\"primary\" @click=\"onSaveLink\">确 定</el-button>\n      </span>\n    </el-dialog>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'TextEditor',\n  data() {\n    return {\n      visible: false,\n      editable: false,\n      formData: {\n        url: ''\n      },\n      content: '',\n      selectElement: null,  // 选中的文字范围\n      position: {\n        start: 0,\n        end: 0\n      }\n    }\n  },\n  mounted() {\n    this.editorArea = document.getElementById('text-area')\n    this.editorArea.innerHTML = this.content\n  },\n  methods: {\n    //--------------------------------插入链接  start----------------------------------------\n    addLink() {\n      this.visible = true\n      this.formData.url = ''\n      const selection = window.getSelection()\n      // 保存选中的文字范围\n      this.selectElement = selection.focusNode\n      this.position.anchorOffset = selection.anchorOffset\n      this.position.focusOffset = selection.focusOffset\n    },\n    onSaveLink() {\n      this.$refs.formDef.validate(valid => {\n        if (valid) {\n          const sText = window.getSelection()\n          if (!sText) return\n          // 下面判断主要是因为弹窗新增链接时，页面的光标已经移动到弹窗，当新增链接时，要将光标定位之前编辑器选中的内容\n          // 直接点击编辑器的a标签进行编辑\n          if (this.editable) {\n            this.selectLink(this.currentLink)\n          } else {\n            // 新增a标签链接\n            this.selectNewLink()\n          }\n          document.execCommand('insertHTML', false, `<a href=\"${this.formData.url}\" target=\"_blank\">${sText}</a>`);\n          this.visible = false\n          this.content = this.editorArea.innerHTML\n          this.onListenerLink()\n        }\n      });\n    },\n    // 选中点击a标签\n    selectLink(obj) {\n      const selection = window.getSelection();\n      selection.removeAllRanges();\n      const range = document.createRange();\n      range.selectNodeContents(obj); // 需要选中的dom节点\n      selection.addRange(range) // 为选中的dom节点添加区域\n    },\n    // 对选中对a标签添加链接\n    selectNewLink() {\n      const selection = window.getSelection()\n      const range = document.createRange()\n      // 获取之前选中的文字范围\n      const rangeDivDom = this.selectElement;\n      const { anchorOffset, focusOffset } = this.position\n      if (anchorOffset < focusOffset) {\n        range.setStart(rangeDivDom, anchorOffset)\n        range.setEnd(rangeDivDom, focusOffset)\n      } else {\n        range.setStart(rangeDivDom, focusOffset)\n        range.setEnd(rangeDivDom, anchorOffset)\n      }\n      // 移除当前所有选区\n      selection.removeAllRanges()\n      selection.addRange(range)\n    },\n    // 监听链接点击事件\n    onListenerLink() {\n      const self = this\n      self.editable = false\n      const ahref = this.editorArea.getElementsByTagName(\"a\");\n      ahref.forEach((href) => {\n        href.addEventListener(\"click\", function () {\n          // 记录点击a标签\n          self.currentLink = this\n          self.editable = true\n          self.selectLink(this)\n\n          self.visible = true\n          self.formData.url = this.getAttribute('href')\n        }, false);\n      })\n    },\n    //--------------------------------插入链接  end----------------------------------------\n    // 复制\n    handleCommand(command) {\n      const sText = window.getSelection()\n      document.execCommand(command, false, sText);\n    }\n  }\n}\n</script>\n\n<style scoped lang=\"scss\">\n// 编辑器\n#text-container {\n  text-align: left;\n  #control-area {\n    width: 90%;\n    margin-bottom: 10px;\n    .link {\n      height: 30px;\n      line-height: 30px;\n      display: inline-block;\n      &:first-child {\n        margin-right: 20px;\n      }\n      &:hover {\n        color: #409eff;\n      }\n    }\n  }\n  #text-area{\n    width: 90%;\n    height: 300px;\n    line-height: 1.5;\n    border: 1px solid #DCDFE6;\n    padding: 5px 15px;\n    box-sizing: border-box;\n    color: #606266;\n    font-size: 14px;\n    border-radius: 4px;\n  }\n}\n</style>\n"]}]}